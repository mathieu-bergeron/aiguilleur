plugins {
    id 'org.jsweet.jsweet-gradle-plugin'
    id 'maven'
}

class LocalJSweetPluginExtension {
   String webRoot = null
   List<Map<String,String>> localJSweetDependencies = []
}

def extension = project.extensions.create('localJSweetPlugin', LocalJSweetPluginExtension) 

project.gradle.projectsEvaluated {
    jsweet {
	    verbose = true
	    encoding = 'UTF-8'
	    sourceMap = true
	    tsOut = new File("${project.projectDir}/jsweet/ts")
	    dtsOut = new File("${project.projectDir}/jsweet/jsOut/src/typings/${project.name}/${project.version}")
	    outDir = new File("${project.projectDir}/jsweet/jsOut/META-INF/resources/webjars/${project.name}/${project.version}")
	    candiesJsOut = new File("${project.projectDir}/jsweet/jsIn")
	    targetVersion = 'ES6'
	    includes = ['**/*.java']
	    bundle = true
	    declaration = true
	    //enableAssertions = true
    }

    def webRoot = extension.webRoot

    for(localDependency in extension.localJSweetDependencies){

        def localProject = project(":$localDependency")
        def name = localProject.name
        def version = localProject.version
        def projectDir = localProject.projectDir
        def group = localProject.group

        def localCandy = [group:"$group", name:"$name", version:"$version"]

        def groupSegments = group.split('\\.')
        def groupTld = groupSegments[0]
        def groupName = groupSegments[1]

        project.getDependencies().add('compile', localProject)
        project.getDependencies().add('compile', localCandy)

        tasks.jsweet.dependsOn ":$name:jsweet"
        tasks.jsweet.inputs.dir("${System.getProperty('user.home')}/.m2/repository/$groupTld/$groupName/$name") 

        if(webRoot != null){

            def outDir = new File("$webRoot/public/js/${name}")
            outDir.mkdirs()
            def srcDir = new File("$projectDir/jsweet/jsOut/META-INF/resources/webjars/$name/$version")
            copyLargeDir(srcDir, outDir, true)
        }
    }
}

jar{
    from ("${project.projectDir}/jsweet/jsOut"){
        include "**"
    }
}

repositories {
    mavenLocal()
    mavenCentral()

	maven { url "http://repository.jsweet.org/artifactory/libs-release-local" }
	maven { url "http://repository.jsweet.org/artifactory/libs-snapshot-local" }
	maven { url "http://repository.jsweet.org/artifactory/plugins-release-local" }
	maven { url "http://repository.jsweet.org/artifactory/plugins-snapshot-local" }
	maven { url "http://google-diff-match-patch.googlecode.com/svn/trunk/maven" }
}

dependencies {
    implementation group: 'org.jsweet', name: 'jsweet-transpiler', version: "2.3.0-SNAPSHOT"
    implementation group: 'org.jsweet', name: 'jsweet-core', version: "6"
}


tasks.clean {
    doFirst {
        new File("${project.projectDir}/jsweet").deleteDir()
        new File("${project.projectDir}/.jsweet").deleteDir()
    }
}


tasks.build {

}

tasks.jsweet {

    inputs.dir("${project.projectDir}/src/main/java")
    outputs.dir("${project.projectDir}/jsweet")

    finalizedBy('jar')
}

tasks.jar {

    doFirst{

	    def candyMetadataFile = new File("${project.projectDir}/jsweet/jsOut/META-INF/candy-metadata.json")
	    def candyMetadataContent ='''{
    "transpilerVersion": "${jsweet.transpiler.version}"
}'''

        try{
	        candyMetadataFile.write(candyMetadataContent)
	    }catch(IOException e){}
    }

    finalizedBy('install')
}

tasks.install{

}

install {
    repositories {
        mavenInstaller {
            pom.whenConfigured {
                p -> p.dependencies = p.dependencies.findAll { 
                        dep -> dep.groupId != "org.jsweet" 
                }
            }
        }
    }
}

// adapted from  https://stackoverflow.com/questions/6214703/copy-entire-directory-contents-to-another-directory
def copyLargeDir(File dirFrom, File dirTo, boolean excludeHiddenFiles){
    if (!dirTo.exists()){
        dirTo.mkdir();
    }

    dirFrom.eachFile(groovy.io.FileType.FILES){File source ->
        if(!excludeHiddenFiles || !source.getName().startsWith(".")){
            File target = new File(dirTo,source.getName());
            target.bytes = source.bytes;
        }
    }

    dirFrom.eachFile(groovy.io.FileType.DIRECTORIES){File source ->
        File target = new File(dirTo,source.getName());
        copyLargeDir(source, target, excludeHiddenFiles)
    }
}


